POP
CODE:
import re

# Apply an operator if its preconditions are met
def apply_operator(state, op):
    if op['preconditions'].issubset(state):
        new_state = (state.difference(op['del_effects'])).union(op['add_effects'])
        return new_state, True
    return state, False

# Choose an operator that can achieve a given goal
def achieve_goal(state, goal, operators):
    return next(
        (op for op in operators if goal in op['add_effects'] and op['preconditions'].issubset(state)),
        None
    )

# Optional placeholder for threat resolution
def resolve_threats(plan):
    print("\nChecking for and resolving threats in the plan...")
    return plan

# Main planning function
def plan_steps(init_state, goal_state, operators):
    state, plan = set(init_state), []
    print("\nInitial State:", state)

    for goal in goal_state:
        if goal not in state:
            op = achieve_goal(state, goal, operators)
            if op:
                print(f"\nApplying: {op['name']}")
                state, ok = apply_operator(state, op)
                if ok:
                    plan.append(op['name'])
                    print("New State:", state)
                else:
                    print("Failed to apply operator for", goal)
            else:
                print(f"No operator found to achieve goal: {goal}")

    plan = resolve_threats(plan)
    print("\nFinal Plan (after threat resolution):", plan)

# Updated parsing to accept names like 'Table'
def parse_input(prompt):
    raw = input(prompt)
    # Match patterns like On(A, B), On(B, Table), Clear(A)
    return set(re.findall(r'\w+\(\w+(?:,\s?\w+)?\)', raw.strip()))

# Example usage
if __name__ == "__main__":
    init_state = parse_input("Enter initial state (e.g. On(B, Table), On(C, A), Clear(B), ...): ")
    goal_state = parse_input("Enter goal state (e.g. On(A, B), On(B, C), Clear(A), ...): ")

    operators = [
        {
            'name': 'Move(C, A, Table)',
            'preconditions': {'On(C, A)', 'Clear(C)', 'Clear(Table)'},
            'add_effects': {'On(C, Table)', 'Clear(A)'},
            'del_effects': {'On(C, A)'}
        },
        {
            'name': 'Move(B, Table, C)',
            'preconditions': {'On(B, Table)', 'Clear(B)', 'Clear(C)'},
            'add_effects': {'On(B, C)', 'Clear(Table)'},
            'del_effects': {'On(B, Table)'}
        },
        {
            'name': 'Move(A, Table, B)',
            'preconditions': {'On(A, Table)', 'Clear(A)', 'Clear(B)'},
            'add_effects': {'On(A, B)', 'Clear(Table)'},
            'del_effects': {'On(A, Table)'}
        }
    ]

    plan_steps(init_state, goal_state, operators)

INPUT:
Enter initial state (e.g. On(B, Table), On(C, A), Clear(B), ...): On(B, Table), On(A, Table), On(C, A), Clear(C), Clear(B), Clear(Table)
Enter goal state (e.g. On(A, B), On(B, C), Clear(A), ...): On(A, B), On(B, C), On(C, Table), Clear(A)

OUTPUT:
Initial State: {'On(C, A)', 'Clear(C)', 'On(A, Table)', 'On(B, Table)', 'Clear(B)', 'Clear(Table)'}

Applying: Move(C, A, Table)
New State: {'On(C, Table)', 'Clear(C)', 'On(B, Table)', 'On(A, Table)', 'Clear(A)', 'Clear(B)', 'Clear(Table)'}

Applying: Move(B, Table, C)
New State: {'On(C, Table)', 'Clear(C)', 'On(A, Table)', 'On(B, C)', 'Clear(A)', 'Clear(B)', 'Clear(Table)'}

Applying: Move(A, Table, B)
New State: {'On(C, Table)', 'Clear(C)', 'On(B, C)', 'On(A, B)', 'Clear(A)', 'Clear(B)', 'Clear(Table)'}

Checking for and resolving threats in the plan...

Final Plan (after threat resolution): ['Move(C, A, Table)', 'Move(B, Table, C)', 'Move(A, Table, B)']