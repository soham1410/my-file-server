VACCUUM CLEANER
CODE:
def print_rooms(rooms, vacuum_location):
    for i, status in enumerate(rooms):
        tag = " (V)" if i == vacuum_location else ""
        print(f"Room {'A' if i == 0 else 'B'}: {status}{tag}")

def main():
    rooms = [
        input("Enter the status of Room A (C for Clean, D for Dirty): ").strip().upper(),
        input("Enter the status of Room B (C for Clean, D for Dirty): ").strip().upper()
    ]

    if any(r not in ('C', 'D') for r in rooms):
        print("Invalid input! Please restart the program and use 'C' or 'D'.")
        return

    pos = input("Enter the initial position of the vacuum cleaner (A or B): ").strip().upper()
    vacuum = 0 if pos == 'A' else 1 if pos == 'B' else -1

    if vacuum == -1:
        print("Invalid input! Please restart the program and use 'A' or 'B'.")
        return

    print("Initial State:")
    print_rooms(rooms, vacuum)

    for step in range(5):
        print(f"\nStep {step + 1}:")
        if rooms[vacuum] == 'D':
            print(f"Cleaning Room {'A' if vacuum == 0 else 'B'}")
            rooms[vacuum] = 'C'
        else:
            print(f"Room {'A' if vacuum == 0 else 'B'} is already clean.")
            vacuum = 1 - vacuum
            print(f"Moving to Room {'A' if vacuum == 0 else 'B'}")
        print_rooms(rooms, vacuum)
        if rooms == ['C', 'C']:
            print("\nBoth rooms are clean. Ending function.")
            break

if __name__ == "__main__":
    main()
INPUT:
Enter the status of Room A (C for Clean, D for Dirty): D
Enter the status of Room B (C for Clean, D for Dirty): D
Enter the initial position of the vacuum cleaner (A or B): A

OUTPUT:
Initial State:
Room A: D (V)
Room B: D
Step 1:
Cleaning Room A
Room A: C (V)
Room B: D
Step 2:
Room A is already clean.
Moving to Room B
Room A: C
Room B: D (V)
Step 3:
Cleaning Room B
Room A: C
Room B: C (V)

Both rooms are clean. Ending function.



GNU PROLOG 
% Rules
father(X, Y) :- parent(X, Y), male(X). % X is the father of Y
mother(X, Y) :- parent(X, Y), female(X). % X is the mother of Y
siblings(X, Y) :- parent(Z, X), parent(Z, Y), X \= Y, X @< Y. % X and Y share a parent
siblings_unique(X, Y) :-
    setof(Y, siblings(X, Y), Sibs),
    member(Y, Sibs).
uncle(X, Y) :- parent(Z, Y), siblings(Z, X), male(X). % X is an uncle of Y
aunt(X, Y) :- parent(Z, Y), siblings(Z, X), female(X). % X is an aunt of Y
cousins(X, Y) :- parent(Z, X), parent(W, Y), siblings(Z, W). % X and Y are cousins
grandparent(X, Y) :- parent(X, Z), parent(Z, Y). % X is a grandparent of Y

% Grandfather and Grandmother rules
grandfather(X, Y) :- father(X, Z), parent(Z, Y). % X is the grandfather of Y
grandmother(X, Y) :- mother(X, Z), parent(Z, Y). % X is the grandmother of Y



BFS-DFS
CODE:
def dfs(graph, start, goal=None):
    visited = []
    stack = [start]
    traversal = []

    while stack:
        node = stack.pop()
        if node not in visited:
            visited.append(node)
            traversal.append(node)
            print(f"DFS - Current Node: {node}, Closed Nodes: {visited}")

            if goal and node == goal:
                print(f"DFS - Goal node {goal} found!")
                break

            for neighbor in reversed(graph[node]):
                if neighbor not in visited:
                    stack.append(neighbor)

    print(f"DFS - Complete Traversal: {traversal}")
    return traversal


def bfs(graph, start, goal=None):
    visited = []
    queue = [start]
    traversal = []

    while queue:
        node = queue.pop(0)
        if node not in visited:
            visited.append(node)
            traversal.append(node)
            print(f"BFS - Current Node: {node}, Closed Nodes: {visited}")

            if goal and node == goal:
                print(f"BFS - Goal node {goal} found!")
                break

            for neighbor in graph[node]:
                if neighbor not in visited:
                    queue.append(neighbor)

    print(f"BFS - Complete Traversal: {traversal}")
    return traversal


def input_graph():
    graph = {}
    num_nodes = int(input("Enter the number of nodes: "))
    for i in range(num_nodes):
        node = input("Enter node: ").strip()
        neighbors = input(f"Enter neighbors for {node}, separated by spaces: ").strip().split()
        neighbors = [neighbor.strip() for neighbor in neighbors]
        graph[node] = neighbors
    return graph


def get_start_node():
    start = input("Enter the starting node: ")
    return start


def get_goal_node():
    has_goal = input("Do you want to search for a goal node? (y/n): ").lower().strip()
    if has_goal == 'y' or has_goal == 'yes':
        goal = input("Enter the goal node: ")
        return goal
    return None


def main():
    graph = input_graph()
    start_node = get_start_node()
    goal_node = get_goal_node()

    print("\nDFS Traversal:")
    dfs(graph, start_node, goal_node)

    print("\nBFS Traversal:")
    bfs(graph, start_node, goal_node)


if __name__ == "__main__":
    main()

INPUT:
Enter the number of nodes: 7
Enter node: A
Enter neighbors for A, separated by spaces: B D E
Enter node: B
Enter neighbors for B, separated by spaces: A C E
Enter node: C
Enter neighbors for C, separated by spaces: B E F G
Enter node: D
Enter neighbors for D, separated by spaces: A E
Enter node: E
Enter neighbors for E, separated by spaces: A B C D F
Enter node: F
Enter neighbors for F, separated by spaces: C E G
Enter node: G
Enter neighbors for G, separated by spaces: C F
Enter the starting node: A
Do you want to search for a goal node? (y/n): Y
Enter the goal node: G

OUTPUT:
DFS Traversal:
DFS - Current Node: A, Closed Nodes: ['A']
DFS - Current Node: B, Closed Nodes: ['A', 'B']
DFS - Current Node: C, Closed Nodes: ['A', 'B', 'C']
DFS - Current Node: E, Closed Nodes: ['A', 'B', 'C', 'E']
DFS - Current Node: D, Closed Nodes: ['A', 'B', 'C', 'E', 'D']
DFS - Current Node: F, Closed Nodes: ['A', 'B', 'C', 'E', 'D', 'F']
DFS - Current Node: G, Closed Nodes: ['A', 'B', 'C', 'E', 'D', 'F', 'G']
DFS - Goal node G found!
DFS - Complete Traversal: ['A', 'B', 'C', 'E', 'D', 'F', 'G']

BFS Traversal:
BFS - Current Node: A, Closed Nodes: ['A']
BFS - Current Node: B, Closed Nodes: ['A', 'B']
BFS - Current Node: D, Closed Nodes: ['A', 'B', 'D']
BFS - Current Node: E, Closed Nodes: ['A', 'B', 'D', 'E']
BFS - Current Node: C, Closed Nodes: ['A', 'B', 'D', 'E', 'C']
BFS - Current Node: F, Closed Nodes: ['A', 'B', 'D', 'E', 'C', 'F']
BFS - Current Node: G, Closed Nodes: ['A', 'B', 'D', 'E', 'C', 'F', 'G']
BFS - Goal node G found!
BFS - Complete Traversal: ['A', 'B', 'D', 'E', 'C', 'F', 'G']





A-SEARCH 
CODE:
def misplaced_tiles(state, goal):
    return sum(state[i][j] != goal[i][j] and state[i][j] != 0 for i in range(3) for j in range(3))

def get_neighbors(state):
    x, y = [(i, row.index(0)) for i, row in enumerate(state) if 0 in row][0]
    moves = {'Up': (-1, 0), 'Down': (1, 0), 'Left': (0, -1), 'Right': (0, 1)}
    neighbors = []
    for move, (dx, dy) in moves.items():
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [r[:] for r in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append((move, new_state))
    return neighbors

def a_star_search(initial, goal):
    open_list = []
    h = misplaced_tiles(initial, goal)
    open_list.append((h, 0, h, initial, []))
    visited = set()

    while open_list:
        # Manually find and pop the lowest f(n) node
        open_list.sort()
        f, g, h, state, path = open_list.pop(0)
        state_tuple = tuple(map(tuple, state))
        if state == goal:
            return path, g, misplaced_tiles(initial, goal), g + misplaced_tiles(initial, goal)
        if state_tuple in visited:
            continue
        visited.add(state_tuple)
        for move, neighbor in get_neighbors(state):
            neighbor_tuple = tuple(map(tuple, neighbor))
            if neighbor_tuple not in visited:
                new_g = g + 1
                new_h = misplaced_tiles(neighbor, goal)
                new_path = path + [(move, neighbor, new_g, new_h)]
                open_list.append((new_g + new_h, new_g, new_h, neighbor, new_path))
    return None, 0, 0, 0

def print_solution(path, initial, g, h, f):
    p = lambda row: " ".join(str(x) if x else " " for x in row)
    print("Initial State:")
    print(f"g(n): {g} | h(n): {h} | f(n): {f}")
    for row in initial: print(p(row))
    print("\nSolution Steps:")
    for move, state, g, h in path:
        print(f"\nMove: {move} | g(n): {g} | h(n): {h} | f(n): {g + h}")
        for row in state: print(p(row))
    print("\nGoal Reached!")

def read_state(prompt):
    print(prompt)
    return [list(map(int, input(f"Enter row {i+1} : ").split())) for i in range(3)]

initial = read_state("Enter the Initial State :")
goal = read_state("\nEnter the Goal State :")

path, g, h, f = a_star_search(initial, goal)
print_solution(path, initial, g, h, f) if path else print("No solution found.")

INPUT:
Enter the Initial State :
Enter row 1 : 1 2 3
Enter row 2 : 8 0 4
Enter row 3 : 7 6 5
Enter the Goal State :
Enter row 1 : 2 8 1
Enter row 2 : 0 4 3
Enter row 3 : 7 6 5
OUTPUT:
Solution Steps:
Move: Up | g(n): 1 | h(n): 5 | f(n): 6
1   3
8 2 4
7 6 5
Move: Left | g(n): 2 | h(n): 5 | f(n): 7
  1 3
8 2 4
7 6 5
Move: Down | g(n): 3 | h(n): 5 | f(n): 8
8 1 3
  2 4
7 6 5
Move: Right | g(n): 4 | h(n): 5 | f(n): 9
8 1 3
2   4
7 6 5
Move: Right | g(n): 5 | h(n): 4 | f(n): 9
8 1 3
2 4  
7 6 5
Move: Up | g(n): 6 | h(n): 3 | f(n): 9
8 1  
2 4 3
7 6 5
Move: Left | g(n): 7 | h(n): 2 | f(n): 9
8   1
2 4 3
7 6 5
Move: Left | g(n): 8 | h(n): 1 | f(n): 9
  8 1
2 4 3
7 6 5
Move: Down | g(n): 9 | h(n): 0 | f(n): 9
2 8 1
  4 3
7 6 5
Goal Reached!










MINIMAX-TIC TAC TOE
CODE:
import math

P, O, E = 'X', 'O', '_'

def print_board(b): print('\n'.join(' '.join(r) for r in b), '\n')

def moves_left(b): return any(E in r for r in b)

def evaluate(b):
    for i in range(3):
        if b[i][0] == b[i][1] == b[i][2] != E: return 1 if b[i][0] == P else -1
        if b[0][i] == b[1][i] == b[2][i] != E: return 1 if b[0][i] == P else -1
    if b[0][0] == b[1][1] == b[2][2] != E: return 1 if b[0][0] == P else -1
    if b[0][2] == b[1][1] == b[2][0] != E: return 1 if b[0][2] == P else -1
    return 0

def minimax(b, d, max_turn):
    score = evaluate(b)
    if score or not moves_left(b): return score
    best = -math.inf if max_turn else math.inf
    for i in range(3):
        for j in range(3):
            if b[i][j] == E:
                b[i][j] = P if max_turn else O
                val = minimax(b, d+1, not max_turn)
                b[i][j] = E
                best = max(best, val) if max_turn else min(best, val)
    return best

def best_move(b):
    move, best_val = (-1, -1), -math.inf
    for i in range(3):
        for j in range(3):
            if b[i][j] == E:
                b[i][j] = P
                val = minimax(b, 0, False)
                b[i][j] = E
                print(f"Position ({i},{j}) has utility: {val}")
                if val > best_val: move, best_val = (i, j), val
    return move

def main():
    b = [[E]*3 for _ in range(3)]
    print("Initial Board:"); print_board(b)
    while moves_left(b) and not evaluate(b):
        x, y = best_move(b); b[x][y] = P
        print("AI plays:"); print_board(b)
        if evaluate(b) or not moves_left(b): break
        try:
            r, c = map(int, input("Enter your move (row col): ").split())
            if not (0 <= r < 3 and 0 <= c < 3) or b[r][c] != E: raise ValueError
            b[r][c] = O
        except: print("Invalid move. Try again."); continue
        print("After your move:"); print_board(b)
        if evaluate(b) or not moves_left(b): break
    print("AI wins!" if evaluate(b) == 1 else "You win!" if evaluate(b) == -1 else "It's a draw!")

if __name__ == "__main__":
    main()

INPUT:
Enter your move (row col): 1 1
Enter your move (row col): 0 2
Enter your move (row col): 1 0
Enter your move (row col): 2 2

OUTPUT:
It's a draw!









BAYES-BELIEF-NETWORK
CODE:
# Priors
P_B, P_E = 0.001, 0.002
P_notB, P_notE = 1 - P_B, 1 - P_E

# Conditional Probabilities
P_A = {(1,1): 0.95, (1,0): 0.94, (0,1): 0.29, (0,0): 0.001}
P_J = {1: 0.9, 0: 0.05}
P_M = {1: 0.7, 0: 0.01}

def compute_joint_probability(b, e, a, j, m):
    pb = P_B if b else P_notB
    pe = P_E if e else P_notE
    pa = P_A[(b, e)] if a else 1 - P_A[(b, e)]
    pj = P_J[a] if j else 1 - P_J[a]
    pm = P_M[a] if m else 1 - P_M[a]
    return pb * pe * pa * pj * pm

def main():
    print("Welcome to the Burglary Alarm Joint Probability Calculator!\n")
    get = lambda q: input(q).strip().lower() == 'yes'
    b, e, a, j, m = map(get, [
        "Did a burglary occur? (yes/no): ",
        "Did an earthquake occur? (yes/no): ",
        "Did the alarm sound? (yes/no): ",
        "Did John call? (yes/no): ",
        "Did Mary call? (yes/no): "
    ])
    jp = compute_joint_probability(b, e, a, j, m)
    print(f"\nThe joint probability of the observed events is: {jp:.8f}")

if __name__ == "__main__":
    main()
INPUT:
Welcome to the Burglary Alarm Joint Probability Calculator!

Did a burglary occur? (yes/no): yes
Did an earthquake occur? (yes/no): no
Did the alarm sound? (yes/no): yes
Did John call? (yes/no): yes
Did Mary call? (yes/no): yes

OUTPUT:
The joint probability of the observed events is: 0.00059102








POP
CODE:
import re

# Apply an operator if its preconditions are met
def apply_operator(state, op):
    if op['preconditions'].issubset(state):
        new_state = (state.difference(op['del_effects'])).union(op['add_effects'])
        return new_state, True
    return state, False

# Choose an operator that can achieve a given goal
def achieve_goal(state, goal, operators):
    return next(
        (op for op in operators if goal in op['add_effects'] and op['preconditions'].issubset(state)),
        None
    )

# Optional placeholder for threat resolution
def resolve_threats(plan):
    print("\nChecking for and resolving threats in the plan...")
    return plan

# Main planning function
def plan_steps(init_state, goal_state, operators):
    state, plan = set(init_state), []
    print("\nInitial State:", state)

    for goal in goal_state:
        if goal not in state:
            op = achieve_goal(state, goal, operators)
            if op:
                print(f"\nApplying: {op['name']}")
                state, ok = apply_operator(state, op)
                if ok:
                    plan.append(op['name'])
                    print("New State:", state)
                else:
                    print("Failed to apply operator for", goal)
            else:
                print(f"No operator found to achieve goal: {goal}")

    plan = resolve_threats(plan)
    print("\nFinal Plan (after threat resolution):", plan)

# Updated parsing to accept names like 'Table'
def parse_input(prompt):
    raw = input(prompt)
    # Match patterns like On(A, B), On(B, Table), Clear(A)
    return set(re.findall(r'\w+\(\w+(?:,\s?\w+)?\)', raw.strip()))

# Example usage
if __name__ == "__main__":
    init_state = parse_input("Enter initial state (e.g. On(B, Table), On(C, A), Clear(B), ...): ")
    goal_state = parse_input("Enter goal state (e.g. On(A, B), On(B, C), Clear(A), ...): ")

    operators = [
        {
            'name': 'Move(C, A, Table)',
            'preconditions': {'On(C, A)', 'Clear(C)', 'Clear(Table)'},
            'add_effects': {'On(C, Table)', 'Clear(A)'},
            'del_effects': {'On(C, A)'}
        },
        {
            'name': 'Move(B, Table, C)',
            'preconditions': {'On(B, Table)', 'Clear(B)', 'Clear(C)'},
            'add_effects': {'On(B, C)', 'Clear(Table)'},
            'del_effects': {'On(B, Table)'}
        },
        {
            'name': 'Move(A, Table, B)',
            'preconditions': {'On(A, Table)', 'Clear(A)', 'Clear(B)'},
            'add_effects': {'On(A, B)', 'Clear(Table)'},
            'del_effects': {'On(A, Table)'}
        }
    ]

    plan_steps(init_state, goal_state, operators)

INPUT:
Enter initial state (e.g. On(B, Table), On(C, A), Clear(B), ...): On(B, Table), On(A, Table), On(C, A), Clear(C), Clear(B), Clear(Table)
Enter goal state (e.g. On(A, B), On(B, C), Clear(A), ...): On(A, B), On(B, C), On(C, Table), Clear(A)

OUTPUT:
Initial State: {'On(C, A)', 'Clear(C)', 'On(A, Table)', 'On(B, Table)', 'Clear(B)', 'Clear(Table)'}

Applying: Move(C, A, Table)
New State: {'On(C, Table)', 'Clear(C)', 'On(B, Table)', 'On(A, Table)', 'Clear(A)', 'Clear(B)', 'Clear(Table)'}

Applying: Move(B, Table, C)
New State: {'On(C, Table)', 'Clear(C)', 'On(A, Table)', 'On(B, C)', 'Clear(A)', 'Clear(B)', 'Clear(Table)'}

Applying: Move(A, Table, B)
New State: {'On(C, Table)', 'Clear(C)', 'On(B, C)', 'On(A, B)', 'Clear(A)', 'Clear(B)', 'Clear(Table)'}

Checking for and resolving threats in the plan...

Final Plan (after threat resolution): ['Move(C, A, Table)', 'Move(B, Table, C)', 'Move(A, Table, B)']
